C START OF UMAT SUBROUTINE      
      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,
     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3 NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)
      
      INCLUDE 'ABA_PARAM.INC'
      
      REAL STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),
     2 DDSDDT(NTENS),DRPLDE(NTENS),
     3 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     4 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3),
     5 JSTEP(4)
      
      REAL C(NTENS,NTENS), C_DEL_EPS(NTENS), TRIAL_STRESS(NTENS)
      REAL TRIAL_STRESS_DEV(NTENS),DEL_EPS_P(NTENS),DEL_EPS_E(NTENS)
      REAL DSTRESS(NTENS), EFF_STRESS,K,G
      E= PROPS(1)
      PNU= PROPS(2)
      H= PROPS(3)
      YIELD_STRENGTH= PROPS(4)
      G= E/(2*(1+PNU))
      K= E/(3*(1-2*PNU))
      P= STATEV(1)
      CALL stiffness_matrix(E,PNU,C)
      
C     DETERMINE TRIAL STRESS      
      C_DEL_EPS= 0.0
      DO K1= 1,NTENS
          DO K2= 1,NTENS
              C_DEL_EPS(K1)= C_DEL_EPS(K1)+ C(K1,K2)*DSTRAN(K2)
          END DO
          TRIAL_STRESS(K1)= STRESS(K1)+ C_DEL_EPS(K1)
      END DO
C     DETERMINE TRIAL STRESS

C     DETERMINE EFFECTIVE TRIAL STRESS
      CALL EFFECTIVE_STRESS(TRIAL_STRESS,EFF_TRIAL_STRESS)
C     DETERMINE EFFECTIVE TRIAL STRESS

C     DETERMINE FLOW STRESS
      FLOW_STRESS= YIELD_STRENGTH + H*P
C     DETERMINE FLOW STRESS
      
C     DETERMINE THE TRIAL YIELD FUNCTION
      CALL F_FACTOR(FLOW_STRESS, EFF_TRIAL_STRESS,F)
C     DETERMINE THE TRIAL YIELD FUNCTION      

C     DETERMINE PLASTIC MULTIPIER
      IF (F.LT.0) THEN
          DEL_P= 0.0
      ELSE
          CALL PLASTIC_MULTI(EFF_TRIAL_STRESS,G,FLOW_STRESS,H,DEL_P)
      END IF
C     DETERMINE PLASTIC MULTIPIER

C     DETERMINE PLASTIC STRAIN, ELASTIC STRAIN AND STRESS INCREMENT
      CALL DEVIATORIC_STRESS(TRIAL_STRESS, TRIAL_STRESS_DEV)
      DEL_EPS_P= (DEL_P*(3/2)/EFF_TRIAL_STRESS)*TRIAL_STRESS_DEV

      DO K1= 1,NTENS
          DEL_EPS_E(K1)= DSTRAN(K1) - DEL_EPS_P(K1)
      END DO
      
      DO K1= 1,NTENS
          DO K2= 1,NTENS
              DSTRESS(K1)= C(K1,K2)*DEL_EPS_E(K2)
          END DO
      END DO
C     DETERMINE PLASTIC STRAIN, ELASTIC STRAIN AND STRESS INCREMENT
      
C     UPDATING VARIABLES
      DO K1= 1,NTENS
          STRESS(K1)= STRESS(K1)+ DSTRESS(K1)
      END DO
      
      P= P+ DEL_P
      STATEV(1)= P
C     UPDATING VARIABLES

C     CALCULATING JACOBIAN
      IF (F.LT.0) THEN 
          DDSDDE= C
      ELSE
          CALL EFFECTIVE_STRESS(STRESS,EFF_STRESS)
          CALL JACO(G,H,K,EFF_STRESS,EFF_TRIAL_STRESS,TRIAL_STRESS_DEV,
     1 DDSDDE, NTENS,NDI)
      END IF 
C     CALCULATING JACOBIAN
      
      RETURN
      END SUBROUTINE UMAT
      
C     100 determine stiffness matrix      
      SUBROUTINE stiffness_matrix(E,PNU,C)
      INCLUDE 'ABA_PARAM.INC'
      real E,PNU
      real C(6,6)
      integer i,j
      do i= 1,6
          do j= 1,6
              C(i,j)= 0
          end do
      end do
      T1= E/((1+PNU)*(1-2*PNU))
      T2= 1 - PNU
      T3= (1-2*PNU)/2
      do i= 1,3
          C(i,i)= T2
          C(i+3,i+3)= T3
      end do
      C(1,2)=PNU      ! assigning rest of the term
      C(1,3)=PNU
      C(2,1)=PNU
      C(2,3)=PNU
      C(3,1)=PNU
      C(3,2)=PNU
      C= C*T1
      
      return 
      END SUBROUTINE stiffness_matrix
C     100 determine stiffness matrix

C     SUBROUTINE TO DETERMINE EFFECTIVE STRESS AND YIELD FUNCTION
      SUBROUTINE EFFECTIVE_STRESS(S,EFF_STRESS)
      INCLUDE 'ABA_PARAM.INC'
      REAL S(6)  ! S= state of stress given by abaqus as a variable name STRESS
      T1= ((S(1)-S(2))**2 + (S(2)-S(3))**2 + (S(3)-S(1))**2)/2.0   ! equation is writen in parts for better readability 
      T2= 3.0*(S(4)**2 + S(5)**2 + S(6)**2)
      EFF_STRESS = SQRT(T1+T2)
      RETURN
      END

      SUBROUTINE F_FACTOR(FLOW_STRESS, EFFECTIVE_STRESS,F)
      INCLUDE 'ABA_PARAM.INC'
      REAL FLOW_STRESS, EFFECTIVE_STRESS
      F= EFFECTIVE_STRESS - FLOW_STRESS
      RETURN
      END
C     SUBROUTINE TO DETERMINE EFFECTIVE STRESS AND YIELD FUNCTION

C     SUBROUTINE TO CAL PLASTIC MULTIPLIER USING NEWTON ITR
      SUBROUTINE PLASTIC_MULTI(EFF_TRIAL_STRESS,G,FLOW_STRESS,H,DEL_P)
      INCLUDE 'ABA_PARAM.INC'
      REAL EFF_TRIAL_STRESS,G,FLOW_STRESS,H,DEL_P
      REAL TOL, D_DEL_P
      TOL= 0.000001
      DEL_P= 0.0
      D_DEL_P= (EFF_TRIAL_STRESS-(3*G*DEL_P)-FLOW_STRESS)/((3*G)+H)
      DO WHILE ( D_DEL_P. LT. TOL )
          DEL_P= DEL_P+ D_DEL_P
          FLOW_STRESS= FLOW_STRESS+(H*D_DEL_P)
          D_DEL_P= (EFF_TRIAL_STRESS-(3*G*DEL_P)-FLOW_STRESS)/((3*G)+H)
      END DO
      
      RETURN
      END 
C     SUBROUTINE TO CAL PLASTIC MULTIPLIER USING NEWTON ITR

C 210 subroutine to cal deviatoric stress       
      SUBROUTINE DEVIATORIC_STRESS(SIGMA, SIGMA_D)
      INCLUDE 'ABA_PARAM.INC'
      IMPLICIT NONE
      REAL SIGMA(6), SIGMA_D(6)
      REAL SIGMA_MEAN
      INTEGER I
      SIGMA_MEAN = (SIGMA(1)+SIGMA(2)+SIGMA(3))/3
      
      DO 5 I= 1,3
          SIGMA_D(I)= SIGMA(I)-SIGMA_MEAN
5     END DO
      
      DO 10 I= 4,6
          SIGMA_D(I)= SIGMA(I)
10    END DO 
      RETURN 
      END SUBROUTINE DEVIATORIC_STRESS
C 210 subroutine to cal deviatoric stress          
      
C 220 subroutine to cal deviatoric stress
      SUBROUTINE JACO(G,H,K,EFF_STRESS,EFF_TRIAL_STRESS,
     1TRIAL_STRESS_DEV,DDSDDE,NTENS,NDI)
      INCLUDE 'ABA_PARAM.INC'
      REAL G,H,K,EFF_STRESS,EFF_TRIAL_STRESS
      REAL TRIAL_STRESS_DEV(NTENS),DDSDDE(NTENS,NTENS)
      REAL N(NTENS), R, Q, T1
      T1= K- (2.0/3.0)*G*R
      N= TRIAL_STRESS_DEV/EFF_TRIAL_STRESS
      R= EFF_STRESS/EFF_TRIAL_STRESS
      Q= (3.0/2.0)*((H/(H + 3*G))-R)
      DDSDDE= 0.0
      DO K1= 1,NTENS
          DDSDDE(K1,K1)= 2.0*G*R
      END DO
      DO K1= 1,NDI
          DO K2= 1,NDI
              DDSDDE(K1,K2)= DDSDDE(K1,K2)+ T1
          END DO
      END DO
      DO K1= 1,NTENS
          DO K2= 1,NTENS
              DDSDDE(K1,K2)= DDSDDE(K1,K2)+ 2.0*G*Q*N(K1)*N(K2)
          END DO
      END DO
      RETURN
      END SUBROUTINE JACO